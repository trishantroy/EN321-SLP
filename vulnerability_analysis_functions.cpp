#include <iostream>

#include "vulnerability_analysis_functions.h"
#include "ford_fulkerson_functions.h"

namespace vulnerability_analysis_functions{
	bus_system::bus_system(){

	}
	void bus_system::calculate_vulnerability_indices(){
	}

	directed_edge::directed_edge(int s, int e, double c){
		start = s;
		end = e;
		capacity = c;
	}

	void directed_graph::generate_vertices(int n){
		for(int i = 1; i <= n; i++){
			vertices.push_back(i);
		}
	}

	std::vector<std::vector<int> > directed_graph::convert_to_adjmatrix(){
		std::vector<std::vector<int> > ans(vertices.size(),std::vector<int>(vertices.size(),0)); // Intializing a vector of size vertices.size() * 0

		for(int i = 0; i < edges.size(); i++){
			// std::cout << edges[i].start-1 << ", " << edges[i].end-1 << ", " << edges[i].capacity << std::endl;
			ans[edges[i].start-1][edges[i].end - 1] = edges[i].capacity;
		}

		// std::cout << ans.size() << std::endl;
		// for(int i = 0; i < ans.size(); i++){
		// 	std::cout << ans[i].size() << std::endl;
		// }
		return ans;
	}

	double directed_graph::find_maximum_flow(int s, int e){
		std::cout << "Entering find_maximum_flow()" << std::endl;
		std::vector<std::vector<int> > adjmatrix = convert_to_adjmatrix();
		double ans = ford_fulkerson_functions::FordFulkerson(adjmatrix, s-1, e-1);
		return ans;
	}
};