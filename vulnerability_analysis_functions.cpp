#include <iostream>

#include "vulnerability_analysis_functions.h"
#include "ford_fulkerson_functions.h"

namespace vulnerability_analysis_functions{
	bus_system::bus_system(){

	}
	void bus_system::calculate_vulnerability_indices(){
	}

	directed_edge::directed_edge(int s, int e, double c){
		start = s;
		end = e;
		capacity = c;
	}

	void maxflow_matrix::print(){
		std::cout << "--------Maximum flow: " << maxflow << "---------" << std::endl;
		std::cout << "Flow through edges in max flow condition: " << std::endl;
		for(int i = 0; i < edges_flow.size(); i++){
			for(int j = 0; j < edges_flow[i].size(); j++){
				if(edges_flow[i][j] != 0)
					std::cout << "Node " << (i+1) << " to Node " << (j+1) << " with flow " << edges_flow[i][j] <<std::endl;
			}
		}
		std::cout << "------------------------------------" << std::endl;
	}

	void directed_graph::generate_vertices_and_empty_edges(int n){
		std::vector<double> empty_row(n,0);
		for(int i = 1; i <= n; i++){			
			vertices.push_back(i);
			edge_capacities.push_back(empty_row);
		}
	}

	maxflow_matrix directed_graph::find_maximum_flow(int s, int e){
		// std::cout << "Entering find_maximum_flow()" << std::endl;
		ford_fulkerson_functions::maxflow_resmatrix ff_resmatrix = ford_fulkerson_functions::FordFulkerson(edge_capacities, s-1, e-1);

		maxflow_matrix ans;
		ans.maxflow = ff_resmatrix.maxflow;
		ans.edges_flow = std::vector<std::vector<double> >(ff_resmatrix.resmatrix.size(),std::vector<double>(ff_resmatrix.resmatrix.size(),0));

		for(int i = 0; i < edge_capacities.size(); i++){
			for(int j = 0; j < edge_capacities[i].size(); j++){
				if(edge_capacities[i][j] != 0){
					ans.edges_flow[i][j] = ff_resmatrix.resmatrix[j][i];
				}
			}
		}
		return ans;
	}
};