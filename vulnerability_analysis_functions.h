#pragma once

#include <iostream>
#include <vector>

namespace vulnerability_analysis_functions{
	class bus_system
	{
	public:
		int number_of_buses;
		std::vector<std::vector<int> > adjacency_matrix;
		std::vector<std::vector<double> > Y_bus_matrix;
		bus_system();
		void calculate_vulnerability_indices();
	};

	class directed_edge
	{
	public:
		int start;
		int end;
		double capacity;
		directed_edge(int s, int e, double c);
	};

	class maxflow_matrix
	{
	public:
		double maxflow;
		std::vector<std::vector<double> > edges_flow;
		void print();
		// maxflow_matrix(int n);
	};

	class directed_graph
	{
	public:
		std::vector<int> vertices, sources, sinks;
		std::vector<std::vector<double> > edge_capacities;
		int no_of_edges;
		void generate_vertices_and_empty_edges(int n);
		std::vector<std::vector<double> > convert_to_adjmatrix();
		maxflow_matrix find_maximum_flow(int s, int e);
		int calculate_in_degree(int s);
		int calculate_out_degree(int s);
		bool is_source(int s);
		bool is_sink(int s);
		void find_sources_and_sinks();
		void find_no_of_edges();
	};
}