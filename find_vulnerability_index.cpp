#include <iostream>
#include <string>
#include <algorithm>
#include <fstream>
#include <sstream>

#include "vulnerability_analysis_functions.h"

namespace vaf = vulnerability_analysis_functions;

vaf::bus_system stevenson_example;
vaf::directed_graph example_1, example_2;
vaf::directed_graph ieee_39_bus_system;

void define_bus_system(){
	stevenson_example.number_of_buses = 4;
}

void get_osos_graph(){
	example_1.generate_vertices_and_empty_edges(7);

	example_1.edge_capacities[0][1] = 17.1;
	example_1.edge_capacities[1][2] = 7.1;
	example_1.edge_capacities[1][3] = 10.1;
	example_1.edge_capacities[2][4] = 6.1;
	example_1.edge_capacities[2][6] = 3.1;
	example_1.edge_capacities[3][4] = 7.1;
	example_1.edge_capacities[3][5] = 5.1;
	example_1.edge_capacities[4][5] = 2.1;
	example_1.edge_capacities[4][6] = 4.1;
	example_1.edge_capacities[5][6] = 8.1;
}

void get_msms_graph(){
	example_2.generate_vertices_and_empty_edges(10);

	example_2.edge_capacities[0][2] = 18;
	example_2.edge_capacities[1][4] = 15;
	example_2.edge_capacities[2][3] = 6;
	example_2.edge_capacities[2][4] = 8;
	example_2.edge_capacities[3][5] = 3;
	example_2.edge_capacities[3][7] = 6;
	example_2.edge_capacities[4][5] = 7;
	example_2.edge_capacities[4][6] = 5;
	example_2.edge_capacities[5][6] = 2;
	example_2.edge_capacities[5][7] = 4;
	example_2.edge_capacities[5][9] = 9;
	example_2.edge_capacities[6][7] = 8;
	example_2.edge_capacities[6][8] = 7;
}

void get_ieee39_bus_system_data(){
	ieee_39_bus_system.generate_vertices_and_empty_edges(39);

	int edges = 0;
	std::ifstream input_file;
	std::vector<double> row;
	std::string line, word, temp;

	input_file.open("data_files/ieee39_line_data.csv");
	std::getline(input_file,line);

	while(std::getline(input_file, line)){
		std::stringstream s(line);
		std::cout << "Line: " << line << std::endl;
		row.clear();
		while (std::getline(s, word, ',')){
			row.push_back(std::atoi(word.c_str()));
		}
		ieee_39_bus_system.edge_capacities[row[0] - 1][row[1] - 1] = row[2];
		edges++;
	}
	ieee_39_bus_system.no_of_edges = edges;

	ieee_39_bus_system.sources.push_back(39);
	ieee_39_bus_system.sources.push_back(31);
	ieee_39_bus_system.sources.push_back(32);
	ieee_39_bus_system.sources.push_back(33);
	ieee_39_bus_system.sources.push_back(34);
	ieee_39_bus_system.sources.push_back(35);
	ieee_39_bus_system.sources.push_back(36);
	ieee_39_bus_system.sources.push_back(37);
	ieee_39_bus_system.sources.push_back(38);
	ieee_39_bus_system.sources.push_back(30);

	ieee_39_bus_system.sinks.push_back(39);
	ieee_39_bus_system.sinks.push_back(7);
	ieee_39_bus_system.sinks.push_back(8);
	ieee_39_bus_system.sinks.push_back(4);
	ieee_39_bus_system.sinks.push_back(3);
	ieee_39_bus_system.sinks.push_back(25);
	ieee_39_bus_system.sinks.push_back(18);
	ieee_39_bus_system.sinks.push_back(31);
	ieee_39_bus_system.sinks.push_back(26);
	ieee_39_bus_system.sinks.push_back(12);
	ieee_39_bus_system.sinks.push_back(27);
	ieee_39_bus_system.sinks.push_back(15);
	ieee_39_bus_system.sinks.push_back(16);
	ieee_39_bus_system.sinks.push_back(20);
	ieee_39_bus_system.sinks.push_back(28);
	ieee_39_bus_system.sinks.push_back(24);
	ieee_39_bus_system.sinks.push_back(21);
	ieee_39_bus_system.sinks.push_back(23);
	ieee_39_bus_system.sinks.push_back(20);
}

int main(int argc, char const *argv[]){
	std::cout << "Starting...." << std::endl;
	// define_bus_system();
	// get_osos_graph();
	// get_msms_graph();
	get_ieee39_bus_system_data();

	vaf::directed_graph example = ieee_39_bus_system;
	// example.find_sources_and_sinks();
	// example.find_no_of_edges();
	
	std::vector<std::vector<double> > sum_of_edge_flows(example.vertices.size(),std::vector<double>(example.vertices.size(),0));
	double max_flows;

	for(int i = 0; i < example.sources.size(); i++){
		for(int j = 0; j < example.sinks.size(); j++){
			if(example.sources[i] != example.sinks[j]){
				std::cout << "Source, Sink: " << example.sources[i] << ", " << example.sinks[j] << std::endl;
				vaf::maxflow_matrix ff_matrix = example.find_maximum_flow(example.sources[i],example.sinks[j]);
				ff_matrix.print();
				max_flows += ff_matrix.maxflow;
				for(int m = 0; m < sum_of_edge_flows.size(); m++){
					for(int n = 0; n < sum_of_edge_flows[m].size(); n++){
						sum_of_edge_flows[m][n] += ff_matrix.edges_flow[m][n];
					}
				}
			}
			else{
				std::cout << "Same source and sink: " << example.sources[i] << ", " << example.sinks[j] << std::endl;
			}
		}
	}
	
	// Centrality Index Calculations
	std::cout << "----------Centrality indices'--------" << std::endl;
	for(int i = 0; i < sum_of_edge_flows.size(); i++){
		for(int j = 0; j < sum_of_edge_flows[i].size(); j++){
			if(example.edge_capacities[i][j] != 0)
				std::cout << "Edge " << (i+1) << " to " << (j+1) << ": " << sum_of_edge_flows[i][j]/max_flows << std::endl;
		}
	}
	std::cout << "-------------------------------------" << std::endl;
	
	// Ranking of edges
	int rank_no = example.no_of_edges;
	std::pair<double, std::pair<int, int> > rank_edges[rank_no];
	int k = 0;
	for(int i = 0; i < sum_of_edge_flows.size(); i++){
		// std::cout << "i: " << i << ", " << sum_of_edge_flows.size() << std::endl;
		for(int j = 0; j < sum_of_edge_flows[i].size(); j++){
			// std::cout << "       j: " << j << ", " << sum_of_edge_flows[i].size() << std::endl;
			if(example.edge_capacities[i][j] != 0){
				// std::cout << "               k: " << k << ", " << rank_no << std::endl;
				rank_edges[k] = std::make_pair(sum_of_edge_flows[i][j]/max_flows, std::make_pair(i+1,j+1));
				k++;
			}
		}
	}

	std::sort(rank_edges, rank_edges + rank_no);
	std::cout << "-----Centrality indices' (Ranked)----" << std::endl;
	std::cout << rank_no << std::endl;
	for(int i = rank_no-1; i >= 0; i--){
		std::cout << "Edge " << rank_edges[i].second.first << "-" << rank_edges[i].second.second << " :: " << rank_edges[i].first;
		if(example.is_source(rank_edges[i].second.first))
			std::cout << " SOURCE";
		if(example.is_sink(rank_edges[i].second.second))
			std::cout << " SINK";
		std::cout << std::endl;
	}
	std::cout << "------------------------------------" << std::endl;

	return 0;
}